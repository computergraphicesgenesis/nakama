// Code generated by protoc-gen-go. DO NOT EDIT.
// source: console/console.proto

/*
Package console is a generated protocol buffer package.

It is generated from these files:
	console/console.proto

It has these top-level messages:
	AccountExport
	AccountId
	Authenticate
	Session
*/
package console

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import nakama_api "github.com/heroiclabs/nakama/api"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// An export of all information stored for a user account.
type AccountExport struct {
	// The user's account details.
	Account *nakama_api.Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// The user's groups.
	Groups []*nakama_api.Group `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
}

func (m *AccountExport) Reset()                    { *m = AccountExport{} }
func (m *AccountExport) String() string            { return proto.CompactTextString(m) }
func (*AccountExport) ProtoMessage()               {}
func (*AccountExport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountExport) GetAccount() *nakama_api.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AccountExport) GetGroups() []*nakama_api.Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// *
// The identifier for a user account.
type AccountId struct {
	// The unique identifier of the user account.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountId) Reset()                    { *m = AccountId{} }
func (m *AccountId) String() string            { return proto.CompactTextString(m) }
func (*AccountId) ProtoMessage()               {}
func (*AccountId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *
// Authenticate against the server with username+password.
type Authenticate struct {
	// The username of the user.
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// The password of the user.
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Authenticate) Reset()                    { *m = Authenticate{} }
func (m *Authenticate) String() string            { return proto.CompactTextString(m) }
func (*Authenticate) ProtoMessage()               {}
func (*Authenticate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Authenticate) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Authenticate) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// *
// A user's session used to authenticate messages.
type Session struct {
	// Authentication credentials.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountExport)(nil), "nakama.console.AccountExport")
	proto.RegisterType((*AccountId)(nil), "nakama.console.AccountId")
	proto.RegisterType((*Authenticate)(nil), "nakama.console.Authenticate")
	proto.RegisterType((*Session)(nil), "nakama.console.Session")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Console service

type ConsoleClient interface {
	// Authenticate a user with username+password.
	Login(ctx context.Context, in *Authenticate, opts ...grpc.CallOption) (*Session, error)
	// Delete all information stored for a user account.
	AccountDelete(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Export all information stored about a user account.
	AccountExportFunc(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*AccountExport, error)
}

type consoleClient struct {
	cc *grpc.ClientConn
}

func NewConsoleClient(cc *grpc.ClientConn) ConsoleClient {
	return &consoleClient{cc}
}

func (c *consoleClient) Login(ctx context.Context, in *Authenticate, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.console.Console/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) AccountDelete(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.console.Console/AccountDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) AccountExportFunc(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*AccountExport, error) {
	out := new(AccountExport)
	err := grpc.Invoke(ctx, "/nakama.console.Console/AccountExportFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Console service

type ConsoleServer interface {
	// Authenticate a user with username+password.
	Login(context.Context, *Authenticate) (*Session, error)
	// Delete all information stored for a user account.
	AccountDelete(context.Context, *AccountId) (*google_protobuf1.Empty, error)
	// Export all information stored about a user account.
	AccountExportFunc(context.Context, *AccountId) (*AccountExport, error)
}

func RegisterConsoleServer(s *grpc.Server, srv ConsoleServer) {
	s.RegisterService(&_Console_serviceDesc, srv)
}

func _Console_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authenticate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).Login(ctx, req.(*Authenticate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_AccountDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).AccountDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/AccountDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).AccountDelete(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_AccountExportFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).AccountExportFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/AccountExportFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).AccountExportFunc(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Console_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.console.Console",
	HandlerType: (*ConsoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Console_Login_Handler,
		},
		{
			MethodName: "AccountDelete",
			Handler:    _Console_AccountDelete_Handler,
		},
		{
			MethodName: "AccountExportFunc",
			Handler:    _Console_AccountExportFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/console.proto",
}

func init() { proto.RegisterFile("console/console.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0x56, 0x32, 0x6d, 0xfd, 0xe7, 0xfd, 0x4c, 0x9b, 0xd9, 0x58, 0x97, 0x6e, 0x5a, 0xc8, 0x10,
	0x1a, 0x15, 0x8d, 0x51, 0xb8, 0xeb, 0x15, 0xdd, 0xd8, 0xd0, 0x24, 0x84, 0x50, 0xe1, 0x0a, 0x21,
	0x21, 0xd7, 0x31, 0x89, 0x59, 0xea, 0x13, 0xd9, 0x4e, 0x07, 0x42, 0xbb, 0xe1, 0x11, 0xe0, 0x75,
	0x78, 0x0b, 0x5e, 0x81, 0x2b, 0x5e, 0x80, 0x5b, 0x94, 0xc4, 0x29, 0xed, 0x2a, 0x76, 0x11, 0x59,
	0xe7, 0x7c, 0xdf, 0xe7, 0xef, 0xe4, 0x7c, 0x32, 0xda, 0x66, 0x20, 0x35, 0x64, 0x9c, 0xd8, 0x33,
	0xcc, 0x15, 0x18, 0xc0, 0xeb, 0x92, 0x5e, 0xd0, 0x31, 0x0d, 0x6d, 0xd7, 0xeb, 0x26, 0xc2, 0xa4,
	0xc5, 0x28, 0x64, 0x30, 0x26, 0x29, 0x57, 0x20, 0x58, 0x46, 0x47, 0x9a, 0xd4, 0x2c, 0x42, 0x73,
	0x51, 0x7e, 0xb5, 0xd6, 0xdb, 0x4b, 0x00, 0x92, 0x8c, 0xd7, 0x5d, 0x29, 0xc1, 0x50, 0x23, 0x40,
	0x6a, 0x8b, 0x76, 0x2c, 0x5a, 0x55, 0xa3, 0xe2, 0x3d, 0xe1, 0xe3, 0xdc, 0x7c, 0xb2, 0xe0, 0xc3,
	0xea, 0x60, 0xbd, 0x84, 0xcb, 0x9e, 0xbe, 0xa4, 0x49, 0xc2, 0x15, 0x81, 0xbc, 0x92, 0x2f, 0x5e,
	0x15, 0x08, 0x74, 0x6b, 0xc0, 0x18, 0x14, 0xd2, 0x9c, 0x7e, 0xcc, 0x41, 0x19, 0xdc, 0x43, 0x2d,
	0x5a, 0x37, 0xda, 0x8e, 0xef, 0x1c, 0xad, 0x45, 0xb7, 0x43, 0xfb, 0x1f, 0xe5, 0x74, 0x96, 0x3b,
	0x6c, 0x38, 0xf8, 0x01, 0x5a, 0x49, 0x14, 0x14, 0xb9, 0x6e, 0xbb, 0xfe, 0xd2, 0xd1, 0x5a, 0xb4,
	0x39, 0xcb, 0x7e, 0x56, 0x22, 0x43, 0x4b, 0x08, 0x3a, 0x68, 0xd5, 0xca, 0xcf, 0x63, 0xbc, 0x8e,
	0x5c, 0x11, 0x57, 0x0e, 0xab, 0x43, 0x57, 0xc4, 0xc1, 0x19, 0xfa, 0x7f, 0x50, 0x98, 0x94, 0x4b,
	0x23, 0x18, 0x35, 0x1c, 0x7b, 0xe8, 0xbf, 0x42, 0x73, 0x25, 0xe9, 0x98, 0x5b, 0xd6, 0xb4, 0x2e,
	0xb1, 0x9c, 0x6a, 0x7d, 0x09, 0x2a, 0x6e, 0xbb, 0x35, 0xd6, 0xd4, 0xc1, 0x01, 0x6a, 0xbd, 0xe2,
	0x5a, 0x0b, 0x90, 0x78, 0x0b, 0x2d, 0x1b, 0xb8, 0xe0, 0xd2, 0xea, 0xeb, 0x22, 0xfa, 0xee, 0xa2,
	0xd6, 0x49, 0x9d, 0x08, 0x66, 0x68, 0xf9, 0x39, 0x24, 0x42, 0xe2, 0xbd, 0x70, 0x3e, 0xab, 0x70,
	0x76, 0x16, 0x6f, 0xe7, 0x3a, 0x6a, 0x1d, 0x82, 0xc3, 0x2f, 0x3f, 0x7e, 0x7e, 0x73, 0xf7, 0x83,
	0x36, 0x99, 0x44, 0xc4, 0x6e, 0x84, 0xd0, 0x19, 0x69, 0xdf, 0xe9, 0xe2, 0xb7, 0xd3, 0x0d, 0x3f,
	0xe5, 0x19, 0x37, 0x1c, 0xef, 0x2e, 0x98, 0x35, 0x5b, 0xf1, 0xee, 0x84, 0x75, 0xb2, 0x61, 0x93,
	0x6c, 0x78, 0x5a, 0x26, 0x1b, 0xb4, 0x2b, 0x23, 0xdc, 0xdd, 0x98, 0x35, 0xfa, 0x2c, 0xe2, 0x2b,
	0x2c, 0xd1, 0xe6, 0x5c, 0x7e, 0x67, 0x85, 0x64, 0x37, 0x39, 0xec, 0xff, 0x03, 0xaa, 0xd5, 0xc1,
	0x41, 0x65, 0xb4, 0x8b, 0x77, 0xae, 0x1b, 0x11, 0x5e, 0x11, 0x8e, 0x7f, 0x3b, 0x5f, 0x07, 0xbf,
	0x1c, 0x7c, 0x85, 0xb6, 0x5f, 0x54, 0xf7, 0xf8, 0xf6, 0x1e, 0x7f, 0xf0, 0xf2, 0xdc, 0x9f, 0x44,
	0xc1, 0x3b, 0x74, 0xf7, 0x75, 0xca, 0x7d, 0x0b, 0x96, 0x6b, 0x04, 0xa5, 0xfd, 0xfb, 0xfe, 0x09,
	0x48, 0xa3, 0xc4, 0xa8, 0x30, 0xa0, 0x34, 0xbe, 0x97, 0x1a, 0x93, 0xeb, 0x3e, 0x21, 0x37, 0xbd,
	0x08, 0x6f, 0x2b, 0xe5, 0x59, 0x06, 0x4f, 0xfe, 0x02, 0x25, 0x2f, 0x5a, 0x8a, 0xc2, 0x47, 0x5d,
	0xc7, 0x89, 0x36, 0x68, 0x9e, 0x67, 0xe5, 0x92, 0x05, 0x48, 0xf2, 0x41, 0x83, 0xec, 0x2f, 0x74,
	0xd4, 0x31, 0x3a, 0xb4, 0x83, 0x68, 0xae, 0x26, 0x5c, 0x4d, 0x87, 0x8d, 0x81, 0x15, 0x63, 0x2e,
	0xeb, 0xa7, 0x80, 0x3b, 0xcd, 0x38, 0xf3, 0x56, 0x24, 0x06, 0xa6, 0xdf, 0xb4, 0xac, 0x66, 0xb4,
	0x52, 0x65, 0xf2, 0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xc0, 0x04, 0x56, 0xee, 0x03,
	0x00, 0x00,
}
