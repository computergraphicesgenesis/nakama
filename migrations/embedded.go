// Code generated by go-bindata.
// sources:
// migrations/20180103142000_initial_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20180103142000_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x51\x73\xda\x38\x17\x7d\xe7\x57\xdc\xc9\xc3\x57\xdc\x8f\x00\xa1\xed\x6e\xa7\xd9\xed\x8c\x03\x4e\xeb\x29\x35\x5d\xdb\xb4\x9b\x27\x46\x48\x17\x5b\x13\x5b\xf2\x4a\x32\x94\xdd\xd9\xff\xbe\x23\xdb\x38\x40\x08\xe9\xec\xf2\x94\xd8\x47\xe7\x9e\x7b\x75\x74\xe4\xc1\xcb\x0e\xbc\x84\xb1\x2c\xb6\x8a\x27\xa9\x81\xd1\xf0\xea\x2d\xc4\x29\x42\x40\xee\x49\x4e\xc0\x2d\x4d\x2a\x95\xee\x40\x85\x9b\x72\x8a\x42\x23\x83\x52\x30\x54\x60\x52\x04\xb7\x20\x34\xc5\xdd\x9b\x1e\x7c\x45\xa5\xb9\x14\x30\xea\x0f\xa1\x6b\x01\x17\xcd\xab\x0b\xe7\xda\x52\x6c\x65\x09\x39\xd9\x82\x90\x06\x4a\x8d\x60\x52\xae\x61\xc5\x33\x04\xfc\x4e\xb1\x30\xc0\x05\x50\x99\x17\x19\x27\x82\x22\x6c\xb8\x49\xab\x3a\x0d\x4b\xdf\x72\xdc\x35\x1c\x72\x69\x08\x17\x40\x80\xca\x62\x0b\x72\xb5\x0f\x04\x62\x1a\xd1\xa9\x31\xc5\xbb\xc1\x60\xb3\xd9\xf4\x49\x25\xb6\x2f\x55\x32\xc8\x6a\x98\x1e\x4c\xfd\xb1\x17\x44\xde\xe5\xa8\x3f\x6c\x16\xcc\x45\x86\x5a\x83\xc2\x3f\x4a\xae\x90\xc1\x72\x0b\xa4\x28\x32\x4e\xc9\x32\x43\xc8\xc8\x06\xa4\x02\x92\x28\x44\x06\x46\x5a\xc1\x1b\xc5\x0d\x17\x49\x0f\xb4\x5c\x99\x0d\x51\x68\x69\x18\xd7\x46\xf1\x65\x69\x0e\xe6\xb5\x93\xc7\xf5\x01\x40\x0a\x20\x02\x2e\xdc\x08\xfc\xe8\x02\x6e\xdc\xc8\x8f\x7a\x96\xe4\x9b\x1f\x7f\x9c\xcd\x63\xf8\xe6\x86\xa1\x1b\xc4\xbe\x17\xc1\x2c\x84\xf1\x2c\x98\xf8\xb1\x3f\x0b\x22\x98\xdd\x82\x1b\xdc\xc1\x27\x3f\x98\xf4\x00\xb9\x49\x51\x01\x7e\x2f\x94\xed\x40\x2a\xe0\x76\x92\xc8\xaa\xb1\x45\x88\x07\x12\x56\xb2\x96\xa4\x0b\xa4\x7c\xc5\x29\x64\x44\x24\x25\x49\x10\x12\xb9\x46\x25\xb8\x48\xa0\x40\x95\x73\x6d\x77\x54\x03\x11\xcc\xd2\x64\x3c\xe7\x86\x98\xea\xd1\xa3\xbe\x6c\xa1\x41\xa7\x73\x79\x09\xff\xcf\x79\xa2\x88\x41\x98\x17\x9d\x71\xe8\xb9\xb1\x07\xb1\x7b\x33\xf5\xc0\xbf\x85\x60\x16\x83\xf7\xbb\x1f\xc5\x91\xf5\x80\xd2\xd0\xed\x00\x00\x7c\x09\xfd\xcf\x6e\x78\x07\x9f\xbc\x3b\xe8\x72\xe6\xf4\xaa\xa7\x9c\xc1\xfe\x6f\x3e\xf7\x27\x0f\xff\x59\xa6\x60\x3e\x9d\xd6\x50\x4b\x26\x48\x8e\xcd\xcb\xaf\x6e\x38\xfe\xe8\x86\xdd\xab\xd1\x5b\x07\xec\xd0\xa2\x38\x74\xfd\x20\xae\x8b\x2e\x76\xe8\xc5\x3d\x6e\x61\x1e\xf8\xbf\xcd\xbd\x23\xbe\x55\x99\x65\x27\xf8\x46\x6f\xde\x34\xda\xc8\x9a\x18\xa2\x16\xa5\xca\x9e\x00\x5c\x5e\x56\xfe\xd3\xef\x06\x03\x23\x65\xa6\xfb\x1c\xcd\xaa\x32\x60\x6a\xf2\x6c\xb0\xa4\xc5\xeb\x9f\x2b\xa0\x9d\xfd\x5e\x97\xad\x74\xab\x1c\x26\xde\xad\x3b\x9f\xc6\xf0\x02\xc5\x8b\x23\x89\x99\xa4\xd5\x5e\x9c\x92\x68\xab\x63\x3f\xe9\xc3\x45\x44\x04\xdc\x2a\x22\x28\xd7\x54\xf6\x60\xec\x5e\x54\x8b\x0d\xcf\xf1\x4f\x29\x4e\xf6\xf7\xb0\xf8\x0b\xa9\xed\x11\xf3\x1c\xa1\x3b\x8f\xe0\x7f\x30\x26\x82\x30\xe2\xd4\x2c\xa5\xa1\x0b\xb9\x5a\x69\x34\x8b\x5c\x03\x44\x9f\xdd\xe9\xd4\x4e\xb9\xfa\xed\xa4\x0f\x8f\x74\xe7\x68\x08\x23\x86\x34\xa5\x6f\xee\x62\xcf\x6d\xbb\x6f\xfb\xfd\xeb\xef\x17\x30\xfe\xe8\x8d\x3f\x41\x37\x43\x91\x98\xb4\xbb\x5b\xe7\xc0\x2f\x70\xf5\xd3\x70\x38\x74\x8e\x88\x31\x27\x3c\x7b\x3c\x48\xdb\x13\x34\xbb\x5c\x03\x0b\xa2\xf5\x46\x2a\x76\x52\xc1\x61\xd1\x1d\xd4\x16\x7d\x35\xb2\x45\x1b\x7f\x10\x8a\x4b\x29\xef\x17\xb5\x47\x0f\xfd\xb6\x5f\x2b\x91\x32\xc9\x70\xb1\xb3\xf2\x19\x20\xc9\x91\xa2\x30\xa8\x2a\xf0\xd3\x40\x6d\x90\xe4\x2d\xe1\x19\x20\x2d\xb5\x91\xf9\x0f\x94\x46\x96\xe0\x82\xca\x52\x98\x0a\xd8\xee\xe0\xd1\x36\x36\x93\xd9\x43\xbf\xff\x15\x1e\xed\x02\x55\x48\x0c\xb2\x05\xa9\xc9\x6e\xfc\x0f\x7b\x7c\x0d\xc5\x1e\xe6\xfd\x63\x86\xb2\x60\xcf\x32\xec\x61\x4e\x30\xac\x51\xf1\x15\x6f\x29\x4e\x32\xec\x63\xea\x3e\x9e\x32\x2c\xe3\xda\xe6\xff\x59\xb6\x7d\xcc\x53\x6c\x1d\xe7\xba\xca\xc7\xd8\x5e\x7c\xa6\xba\x52\x74\x2a\xcb\x8c\xc1\x12\x41\x61\x91\x11\x8a\xac\xbe\xf7\x88\x00\xa2\x14\xd9\x02\x95\x59\x99\x0b\x7b\xd3\xd8\xa8\xad\x23\xb3\x5a\x6a\x89\xa4\xbd\x27\xa9\xa4\xf7\x4a\x12\x9a\xb2\x25\x10\xc6\x34\xe8\xb2\x28\xa4\x32\x55\xc8\xd7\x24\x66\x5b\xa0\x7e\x2e\x8a\x17\x0c\xd7\x9c\xe2\xd9\x40\xbe\x9d\x85\x9e\xff\x21\xa8\x9f\x56\x8b\x38\x73\x20\xf4\x6e\xbd\xd0\x0b\xc6\x5e\x93\xe9\x15\xde\x86\x48\x3c\x9b\xcc\xde\xc1\x2c\x80\x89\x37\xf5\x62\x0f\xc6\x6e\x34\x76\x27\xde\x61\xb8\x1f\xd8\xf2\x71\xa8\x5b\xfb\x1e\x04\xff\xc1\x34\x9f\xeb\xc9\x7a\xf5\x54\x47\x5a\x96\x8a\xda\x53\xd9\x03\x6d\x88\xc1\x1e\x14\x52\x73\x9b\xa6\xa7\x3a\x6d\xd1\xff\xb6\xd7\x03\x36\x86\xda\x70\x51\x45\xf7\x7f\xa0\x6c\x35\xd5\x53\x69\x47\x74\x38\xc1\x5d\x57\xbb\xa4\xdb\x59\xb7\x45\xd9\x3a\x73\xfb\x5d\x67\xdd\xa2\xad\x6d\xa4\xb2\x17\xbb\x14\xa0\xe4\x46\x9f\x3d\x8f\x3f\x74\x14\x0f\xbb\x7d\x4a\x67\xb5\x09\x0f\x99\xd3\x5e\x24\x27\x8e\xa4\x55\xbc\x52\x1c\x05\xeb\x0e\x9d\x1e\x70\xb1\xe6\x06\xbb\x57\xed\x9f\xac\x3b\x72\x7a\xb0\xcc\x24\xbd\x47\xd6\x7d\xe5\xf4\x80\x61\x86\xf6\xf9\x6b\xa7\x07\x44\xd1\x94\xaf\x91\x75\xdf\x38\x9d\xaa\x72\x73\xfb\xef\x3b\xe2\x68\x83\x76\xc7\xb6\xfd\xac\x99\xc8\x8d\xe8\x4c\xc2\xd9\x97\x07\xdf\x1d\x7b\xee\xfa\xcc\xfb\xfa\x9c\x9d\x41\xe8\xeb\xce\x3f\x01\x00\x00\xff\xff\x0d\xac\x17\xbe\x9d\x0b\x00\x00")

func _20180103142000_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180103142000_initial_schemaSql,
		"20180103142000_initial_schema.sql",
	)
}

func _20180103142000_initial_schemaSql() (*asset, error) {
	bytes, err := _20180103142000_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180103142000_initial_schema.sql", size: 2973, mode: os.FileMode(420), modTime: time.Unix(1515235772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20180103142000_initial_schema.sql": _20180103142000_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20180103142000_initial_schema.sql": &bintree{_20180103142000_initial_schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

