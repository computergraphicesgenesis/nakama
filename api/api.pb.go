// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/api.proto

It has these top-level messages:
	Account
	AccountCustom
	AccountDevice
	AccountEmail
	AccountFacebook
	AccountGameCenter
	AccountGoogle
	AccountSteam
	AccountUpdate
	AuthenticateCustom
	AuthenticateDevice
	AuthenticateEmail
	AuthenticateFacebook
	AuthenticateGameCenter
	AuthenticateGoogle
	AuthenticateSteam
	ChannelId
	Friend
	FriendAdd
	Group
	Groups
	GroupsCreate
	Rpc
	Session
	User
	Users
	UsersFetch
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The type of chat channel.
type ChannelId_Type int32

const (
	// A room which anyone can join to chat.
	ChannelId_ROOM ChannelId_Type = 0
	// A private channel for 1-on-1 chat.
	ChannelId_DIRECT_MESSAGE ChannelId_Type = 1
	// A channel for group chat.
	ChannelId_GROUP ChannelId_Type = 2
)

var ChannelId_Type_name = map[int32]string{
	0: "ROOM",
	1: "DIRECT_MESSAGE",
	2: "GROUP",
}
var ChannelId_Type_value = map[string]int32{
	"ROOM":           0,
	"DIRECT_MESSAGE": 1,
	"GROUP":          2,
}

func (x ChannelId_Type) String() string {
	return proto.EnumName(ChannelId_Type_name, int32(x))
}
func (ChannelId_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

// The friendship status.
type Friend_State int32

const (
	// The user is a friend of the current user.
	Friend_FRIEND Friend_State = 0
	// The user has sent an invite to the current user.
	Friend_INVITE_SENT Friend_State = 1
	// The current user has sent an invite to this user.
	Friend_INVITE_RECEIVED Friend_State = 2
	// The current user has blocked this user.
	Friend_BLOCKED Friend_State = 3
)

var Friend_State_name = map[int32]string{
	0: "FRIEND",
	1: "INVITE_SENT",
	2: "INVITE_RECEIVED",
	3: "BLOCKED",
}
var Friend_State_value = map[string]int32{
	"FRIEND":          0,
	"INVITE_SENT":     1,
	"INVITE_RECEIVED": 2,
	"BLOCKED":         3,
}

func (x Friend_State) String() string {
	return proto.EnumName(Friend_State_name, int32(x))
}
func (Friend_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

// *
// A user with additional account details. Always the current user.
type Account struct {
	// The user object.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// Whether the user has been verified. Via email or social profiles.
	Verified bool `protobuf:"varint,2,opt,name=verified" json:"verified,omitempty"`
	// The email address of the user.
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	// The devices which belong to the user's account.
	Devices []*AccountDevice `protobuf:"bytes,4,rep,name=devices" json:"devices,omitempty"`
	// The custom id in the user's account.
	CustomId string `protobuf:"bytes,5,opt,name=custom_id,json=customId" json:"custom_id,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Account) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Account) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Account) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Account) GetDevices() []*AccountDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Account) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

// *
// Send a custom ID to the server. Used with authenticate/link/unlink.
type AccountCustom struct {
	// A custom identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountCustom) Reset()                    { *m = AccountCustom{} }
func (m *AccountCustom) String() string            { return proto.CompactTextString(m) }
func (*AccountCustom) ProtoMessage()               {}
func (*AccountCustom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountCustom) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *
// Send a device to the server. Used with authenticate/link/unlink and user.
type AccountDevice struct {
	// A device identifier. Should be obtained by a platform-specific device API.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountDevice) Reset()                    { *m = AccountDevice{} }
func (m *AccountDevice) String() string            { return proto.CompactTextString(m) }
func (*AccountDevice) ProtoMessage()               {}
func (*AccountDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccountDevice) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *
// Send an email with password to the server. Used with authenticate/link/unlink.
type AccountEmail struct {
	// A valid RFC-5322 email address.
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	// A password for the user account.
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AccountEmail) Reset()                    { *m = AccountEmail{} }
func (m *AccountEmail) String() string            { return proto.CompactTextString(m) }
func (*AccountEmail) ProtoMessage()               {}
func (*AccountEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountEmail) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountEmail) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// *
// Send a Facebook token to the server. Used with authenticate/link/unlink.
type AccountFacebook struct {
	// The OAuth token received from Facebook to access their profile API.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AccountFacebook) Reset()                    { *m = AccountFacebook{} }
func (m *AccountFacebook) String() string            { return proto.CompactTextString(m) }
func (*AccountFacebook) ProtoMessage()               {}
func (*AccountFacebook) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccountFacebook) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// *
// Send Apple's Game Center account credentials to the server. Used with authenticate/link/unlink.
//
// https://developer.apple.com/documentation/gamekit/gklocalplayer/1515407-generateidentityverificationsign
type AccountGameCenter struct {
	// Player ID (generated by GameCenter).
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	// Bundle ID (generated by GameCenter).
	BundleId string `protobuf:"bytes,2,opt,name=bundle_id,json=bundleId" json:"bundle_id,omitempty"`
	// Time since UNIX epoch when the signature was created.
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// A random "NSString" used to compute the hash and keep it randomized.
	Salt string `protobuf:"bytes,4,opt,name=salt" json:"salt,omitempty"`
	// The verification signature data generated.
	Signature string `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	// The URL for the public encryption key.
	PublicKeyUrl string `protobuf:"bytes,6,opt,name=public_key_url,json=publicKeyUrl" json:"public_key_url,omitempty"`
}

func (m *AccountGameCenter) Reset()                    { *m = AccountGameCenter{} }
func (m *AccountGameCenter) String() string            { return proto.CompactTextString(m) }
func (*AccountGameCenter) ProtoMessage()               {}
func (*AccountGameCenter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AccountGameCenter) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *AccountGameCenter) GetBundleId() string {
	if m != nil {
		return m.BundleId
	}
	return ""
}

func (m *AccountGameCenter) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AccountGameCenter) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *AccountGameCenter) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *AccountGameCenter) GetPublicKeyUrl() string {
	if m != nil {
		return m.PublicKeyUrl
	}
	return ""
}

// *
// Send a Google token to the server. Used with authenticate/link/unlink.
type AccountGoogle struct {
	// The OAuth token received from Google to access their profile API.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AccountGoogle) Reset()                    { *m = AccountGoogle{} }
func (m *AccountGoogle) String() string            { return proto.CompactTextString(m) }
func (*AccountGoogle) ProtoMessage()               {}
func (*AccountGoogle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AccountGoogle) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// *
// Send a Steam token to the server. Used with authenticate/link/unlink.
type AccountSteam struct {
	// The account token received from Steam to access their profile API.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AccountSteam) Reset()                    { *m = AccountSteam{} }
func (m *AccountSteam) String() string            { return proto.CompactTextString(m) }
func (*AccountSteam) ProtoMessage()               {}
func (*AccountSteam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AccountSteam) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// *
// Update a user's account details.
type AccountUpdate struct {
	// The username of the user's account.
	Username *google_protobuf2.StringValue `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// The fullname of the user.
	Fullname *google_protobuf2.StringValue `protobuf:"bytes,2,opt,name=fullname" json:"fullname,omitempty"`
	// A URL for an avatar image.
	AvatarUrl *google_protobuf2.StringValue `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	Lang *google_protobuf2.StringValue `protobuf:"bytes,4,opt,name=lang" json:"lang,omitempty"`
	// The location set by the user.
	Location *google_protobuf2.StringValue `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	// The timezone set by the user.
	Timezone *google_protobuf2.StringValue `protobuf:"bytes,6,opt,name=timezone" json:"timezone,omitempty"`
}

func (m *AccountUpdate) Reset()                    { *m = AccountUpdate{} }
func (m *AccountUpdate) String() string            { return proto.CompactTextString(m) }
func (*AccountUpdate) ProtoMessage()               {}
func (*AccountUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AccountUpdate) GetUsername() *google_protobuf2.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *AccountUpdate) GetFullname() *google_protobuf2.StringValue {
	if m != nil {
		return m.Fullname
	}
	return nil
}

func (m *AccountUpdate) GetAvatarUrl() *google_protobuf2.StringValue {
	if m != nil {
		return m.AvatarUrl
	}
	return nil
}

func (m *AccountUpdate) GetLang() *google_protobuf2.StringValue {
	if m != nil {
		return m.Lang
	}
	return nil
}

func (m *AccountUpdate) GetLocation() *google_protobuf2.StringValue {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *AccountUpdate) GetTimezone() *google_protobuf2.StringValue {
	if m != nil {
		return m.Timezone
	}
	return nil
}

// *
// Authenticate against the server with a custom ID.
type AuthenticateCustom struct {
	// The custom account details.
	Account *AccountCustom `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf2.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateCustom) Reset()                    { *m = AuthenticateCustom{} }
func (m *AuthenticateCustom) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateCustom) ProtoMessage()               {}
func (*AuthenticateCustom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AuthenticateCustom) GetAccount() *AccountCustom {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateCustom) GetCreate() *google_protobuf2.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateCustom) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// *
// Authenticate against the server with a device ID.
type AuthenticateDevice struct {
	// The device account details.
	Account *AccountDevice `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf2.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateDevice) Reset()                    { *m = AuthenticateDevice{} }
func (m *AuthenticateDevice) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateDevice) ProtoMessage()               {}
func (*AuthenticateDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AuthenticateDevice) GetAccount() *AccountDevice {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateDevice) GetCreate() *google_protobuf2.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateDevice) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// *
// Authenticate against the server with email+password.
type AuthenticateEmail struct {
	// The email account details.
	Account *AccountEmail `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf2.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateEmail) Reset()                    { *m = AuthenticateEmail{} }
func (m *AuthenticateEmail) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateEmail) ProtoMessage()               {}
func (*AuthenticateEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AuthenticateEmail) GetAccount() *AccountEmail {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateEmail) GetCreate() *google_protobuf2.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateEmail) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// *
// Authenticate against the server with Facebook.
type AuthenticateFacebook struct {
	// The Facebook account details.
	Account *AccountFacebook `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf2.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateFacebook) Reset()                    { *m = AuthenticateFacebook{} }
func (m *AuthenticateFacebook) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateFacebook) ProtoMessage()               {}
func (*AuthenticateFacebook) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AuthenticateFacebook) GetAccount() *AccountFacebook {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateFacebook) GetCreate() *google_protobuf2.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateFacebook) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// *
// Authenticate against the server with Apple's Game Center.
type AuthenticateGameCenter struct {
	// The Game Center account details.
	Account *AccountGameCenter `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf2.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateGameCenter) Reset()                    { *m = AuthenticateGameCenter{} }
func (m *AuthenticateGameCenter) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateGameCenter) ProtoMessage()               {}
func (*AuthenticateGameCenter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AuthenticateGameCenter) GetAccount() *AccountGameCenter {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateGameCenter) GetCreate() *google_protobuf2.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateGameCenter) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// *
// Authenticate against the server with Google.
type AuthenticateGoogle struct {
	// The Google account details.
	Account *AccountGoogle `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf2.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateGoogle) Reset()                    { *m = AuthenticateGoogle{} }
func (m *AuthenticateGoogle) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateGoogle) ProtoMessage()               {}
func (*AuthenticateGoogle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AuthenticateGoogle) GetAccount() *AccountGoogle {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateGoogle) GetCreate() *google_protobuf2.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateGoogle) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// *
// Authenticate against the server with Steam.
type AuthenticateSteam struct {
	// The Steam account details.
	Account *AccountSteam `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf2.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateSteam) Reset()                    { *m = AuthenticateSteam{} }
func (m *AuthenticateSteam) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateSteam) ProtoMessage()               {}
func (*AuthenticateSteam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AuthenticateSteam) GetAccount() *AccountSteam {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateSteam) GetCreate() *google_protobuf2.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateSteam) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// *
// An identifier for a realtime chat channel.
type ChannelId struct {
	// The identifier for the realtime channel.
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (m *ChannelId) Reset()                    { *m = ChannelId{} }
func (m *ChannelId) String() string            { return proto.CompactTextString(m) }
func (*ChannelId) ProtoMessage()               {}
func (*ChannelId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ChannelId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChannelId) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// *
// A friend of a user.
type Friend struct {
	// The user object.
	User  *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	State int32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
}

func (m *Friend) Reset()                    { *m = Friend{} }
func (m *Friend) String() string            { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()               {}
func (*Friend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Friend) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Friend) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// *
// Add one or more friends to the current user.
type FriendAdd struct {
	// The account id of a user.
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	// The account username of a user.
	Usernames []string `protobuf:"bytes,2,rep,name=usernames" json:"usernames,omitempty"`
}

func (m *FriendAdd) Reset()                    { *m = FriendAdd{} }
func (m *FriendAdd) String() string            { return proto.CompactTextString(m) }
func (*FriendAdd) ProtoMessage()               {}
func (*FriendAdd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FriendAdd) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *FriendAdd) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

// *
// A group in the server.
type Group struct {
	// The id of a group.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The id of the user who created the group.
	CreatorId string `protobuf:"bytes,2,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	// The unique name of the group.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// A description for the group.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	Lang string `protobuf:"bytes,5,opt,name=lang" json:"lang,omitempty"`
	// Additional information stored as a JSON object.
	Metadata string `protobuf:"bytes,6,opt,name=metadata" json:"metadata,omitempty"`
	// A URL for an avatar image.
	AvatarUrl string `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// Mark a group as private where only admins can accept members.
	Private bool `protobuf:"varint,8,opt,name=private" json:"private,omitempty"`
	// The current count of all members in the group.
	Count int64 `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
	// The UTC offset in milliseconds.
	UtcOffsetMs int64 `protobuf:"varint,10,opt,name=utc_offset_ms,json=utcOffsetMs" json:"utc_offset_ms,omitempty"`
	// The UNIX time when the group was created.
	CreatedAt int64 `protobuf:"varint,11,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// The UNIX time when the group was last updated.
	UpdatedAt int64 `protobuf:"varint,12,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetCreatorId() string {
	if m != nil {
		return m.CreatorId
	}
	return ""
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *Group) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *Group) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *Group) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *Group) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Group) GetUtcOffsetMs() int64 {
	if m != nil {
		return m.UtcOffsetMs
	}
	return 0
}

func (m *Group) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Group) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

// *
// A collection of zero or more groups.
type Groups struct {
	// The Group objects.
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *Groups) Reset()                    { *m = Groups{} }
func (m *Groups) String() string            { return proto.CompactTextString(m) }
func (*Groups) ProtoMessage()               {}
func (*Groups) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Groups) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// *
// Create one or more groups with the current user as owner.
type GroupsCreate struct {
	// The Group objects to create.
	Groups []*GroupsCreate_NewGroup `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *GroupsCreate) Reset()                    { *m = GroupsCreate{} }
func (m *GroupsCreate) String() string            { return proto.CompactTextString(m) }
func (*GroupsCreate) ProtoMessage()               {}
func (*GroupsCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GroupsCreate) GetGroups() []*GroupsCreate_NewGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

// *
// A group to create.
type GroupsCreate_NewGroup struct {
	// A unique name for the group.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A description for the group.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	Lang string `protobuf:"bytes,3,opt,name=lang" json:"lang,omitempty"`
	// Additional information stored as a JSON object.
	Metadata string `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
	// A URL for an avatar image.
	AvatarUrl string `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// Mark a group as private where only admins can accept members.
	Private bool `protobuf:"varint,6,opt,name=private" json:"private,omitempty"`
}

func (m *GroupsCreate_NewGroup) Reset()                    { *m = GroupsCreate_NewGroup{} }
func (m *GroupsCreate_NewGroup) String() string            { return proto.CompactTextString(m) }
func (*GroupsCreate_NewGroup) ProtoMessage()               {}
func (*GroupsCreate_NewGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

func (m *GroupsCreate_NewGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupsCreate_NewGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GroupsCreate_NewGroup) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *GroupsCreate_NewGroup) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *GroupsCreate_NewGroup) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *GroupsCreate_NewGroup) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

// *
// Execute an Lua function on the server.
type Rpc struct {
	// The identifier of the function.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The payload of the function which must be a JSON object.
	Payload *google_protobuf2.StringValue `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	// The authentication key used when executed as a non-client HTTP request.
	HttpKey *google_protobuf2.StringValue `protobuf:"bytes,3,opt,name=http_key,json=httpKey" json:"http_key,omitempty"`
}

func (m *Rpc) Reset()                    { *m = Rpc{} }
func (m *Rpc) String() string            { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()               {}
func (*Rpc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Rpc) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rpc) GetPayload() *google_protobuf2.StringValue {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Rpc) GetHttpKey() *google_protobuf2.StringValue {
	if m != nil {
		return m.HttpKey
	}
	return nil
}

// *
// A user's session used to authenticate messages.
type Session struct {
	// Authentication credentials.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// rUDP specific authentication credentials.
	UdpToken string `protobuf:"bytes,2,opt,name=udp_token,json=udpToken" json:"udp_token,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Session) GetUdpToken() string {
	if m != nil {
		return m.UdpToken
	}
	return ""
}

// *
// A user in the server.
type User struct {
	// The id of the user's account.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The username of the user's account.
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// The fullname of the user.
	Fullname string `protobuf:"bytes,3,opt,name=fullname" json:"fullname,omitempty"`
	// A URL for an avatar image.
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	Lang string `protobuf:"bytes,5,opt,name=lang" json:"lang,omitempty"`
	// The location set by the user.
	Location string `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	// The timezone set by the user.
	Timezone string `protobuf:"bytes,7,opt,name=timezone" json:"timezone,omitempty"`
	// Additional information stored as a JSON object.
	Metadata string `protobuf:"bytes,8,opt,name=metadata" json:"metadata,omitempty"`
	// The Facebook id in the user's account.
	FacebookId string `protobuf:"bytes,9,opt,name=facebook_id,json=facebookId" json:"facebook_id,omitempty"`
	// The Google id in the user's account.
	GoogleId string `protobuf:"bytes,10,opt,name=google_id,json=googleId" json:"google_id,omitempty"`
	// The Apple Game Center in of the user's account.
	GamcenterId string `protobuf:"bytes,11,opt,name=gamcenter_id,json=gamcenterId" json:"gamcenter_id,omitempty"`
	// The Steam id in the user's account.
	SteamId string `protobuf:"bytes,12,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	// Indicates whether the user is currently online.
	Online bool `protobuf:"varint,13,opt,name=online" json:"online,omitempty"`
	// The UNIX time when the user was created.
	CreatedAt int64 `protobuf:"varint,14,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// The UNIX time when the user was last updated.
	UpdatedAt int64 `protobuf:"varint,15,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *User) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *User) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *User) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *User) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *User) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *User) GetFacebookId() string {
	if m != nil {
		return m.FacebookId
	}
	return ""
}

func (m *User) GetGoogleId() string {
	if m != nil {
		return m.GoogleId
	}
	return ""
}

func (m *User) GetGamcenterId() string {
	if m != nil {
		return m.GamcenterId
	}
	return ""
}

func (m *User) GetSteamId() string {
	if m != nil {
		return m.SteamId
	}
	return ""
}

func (m *User) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *User) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *User) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

// *
// A collection of zero or more users.
type Users struct {
	// The User objects.
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

// *
// Fetch a batch of zero or more users from the server.
type UsersFetch struct {
	// The account id of a user.
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	// The account username of a user.
	Usernames []string `protobuf:"bytes,2,rep,name=usernames" json:"usernames,omitempty"`
}

func (m *UsersFetch) Reset()                    { *m = UsersFetch{} }
func (m *UsersFetch) String() string            { return proto.CompactTextString(m) }
func (*UsersFetch) ProtoMessage()               {}
func (*UsersFetch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UsersFetch) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *UsersFetch) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "nakama.api.Account")
	proto.RegisterType((*AccountCustom)(nil), "nakama.api.AccountCustom")
	proto.RegisterType((*AccountDevice)(nil), "nakama.api.AccountDevice")
	proto.RegisterType((*AccountEmail)(nil), "nakama.api.AccountEmail")
	proto.RegisterType((*AccountFacebook)(nil), "nakama.api.AccountFacebook")
	proto.RegisterType((*AccountGameCenter)(nil), "nakama.api.AccountGameCenter")
	proto.RegisterType((*AccountGoogle)(nil), "nakama.api.AccountGoogle")
	proto.RegisterType((*AccountSteam)(nil), "nakama.api.AccountSteam")
	proto.RegisterType((*AccountUpdate)(nil), "nakama.api.AccountUpdate")
	proto.RegisterType((*AuthenticateCustom)(nil), "nakama.api.AuthenticateCustom")
	proto.RegisterType((*AuthenticateDevice)(nil), "nakama.api.AuthenticateDevice")
	proto.RegisterType((*AuthenticateEmail)(nil), "nakama.api.AuthenticateEmail")
	proto.RegisterType((*AuthenticateFacebook)(nil), "nakama.api.AuthenticateFacebook")
	proto.RegisterType((*AuthenticateGameCenter)(nil), "nakama.api.AuthenticateGameCenter")
	proto.RegisterType((*AuthenticateGoogle)(nil), "nakama.api.AuthenticateGoogle")
	proto.RegisterType((*AuthenticateSteam)(nil), "nakama.api.AuthenticateSteam")
	proto.RegisterType((*ChannelId)(nil), "nakama.api.ChannelId")
	proto.RegisterType((*Friend)(nil), "nakama.api.Friend")
	proto.RegisterType((*FriendAdd)(nil), "nakama.api.FriendAdd")
	proto.RegisterType((*Group)(nil), "nakama.api.Group")
	proto.RegisterType((*Groups)(nil), "nakama.api.Groups")
	proto.RegisterType((*GroupsCreate)(nil), "nakama.api.GroupsCreate")
	proto.RegisterType((*GroupsCreate_NewGroup)(nil), "nakama.api.GroupsCreate.NewGroup")
	proto.RegisterType((*Rpc)(nil), "nakama.api.Rpc")
	proto.RegisterType((*Session)(nil), "nakama.api.Session")
	proto.RegisterType((*User)(nil), "nakama.api.User")
	proto.RegisterType((*Users)(nil), "nakama.api.Users")
	proto.RegisterType((*UsersFetch)(nil), "nakama.api.UsersFetch")
	proto.RegisterEnum("nakama.api.ChannelId_Type", ChannelId_Type_name, ChannelId_Type_value)
	proto.RegisterEnum("nakama.api.Friend_State", Friend_State_name, Friend_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nakama service

type NakamaClient interface {
	// Fetch the current user's account.
	AccountFetch(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Account, error)
	// Update fields in the current user's account.
	AccountUpdateFunc(ctx context.Context, in *AccountUpdate, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Authenticate a user with a custom id against the server.
	AuthenticateCustomFunc(ctx context.Context, in *AuthenticateCustom, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with a device id against the server.
	AuthenticateDeviceFunc(ctx context.Context, in *AuthenticateDevice, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with an email+password against the server.
	AuthenticateEmailFunc(ctx context.Context, in *AuthenticateEmail, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with a Facebook OAuth token against the server.
	AuthenticateFacebookFunc(ctx context.Context, in *AuthenticateFacebook, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with Apple's GameCenter against the server.
	AuthenticateGameCenterFunc(ctx context.Context, in *AuthenticateGameCenter, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with Google against the server.
	AuthenticateGoogleFunc(ctx context.Context, in *AuthenticateGoogle, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with Steam against the server.
	AuthenticateSteamFunc(ctx context.Context, in *AuthenticateSteam, opts ...grpc.CallOption) (*Session, error)
	// Add friends by ID or handle to a user's account.
	FriendAddFunc(ctx context.Context, in *FriendAdd, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Create one or more new groups with the current user as the owner.
	GroupsCreateFunc(ctx context.Context, in *GroupsCreate, opts ...grpc.CallOption) (*Groups, error)
	// A healthcheck which load balancers can use to check the service.
	Healthcheck(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add a custom ID to the social profiles on the current user's account.
	LinkCustomFunc(ctx context.Context, in *AccountCustom, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add a device ID to the social profiles on the current user's account.
	LinkDeviceFunc(ctx context.Context, in *AccountDevice, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add an email+password to the social profiles on the current user's account.
	LinkEmailFunc(ctx context.Context, in *AccountEmail, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add Facebook to the social profiles on the current user's account.
	LinkFacebookFunc(ctx context.Context, in *AccountFacebook, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add Apple's GameCenter to the social profiles on the current user's account.
	LinkGameCenterFunc(ctx context.Context, in *AccountGameCenter, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add Google to the social profiles on the current user's account.
	LinkGoogleFunc(ctx context.Context, in *AccountGoogle, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add Steam to the social profiles on the current user's account.
	LinkSteamFunc(ctx context.Context, in *AccountSteam, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Execute a Lua function on the server.
	RpcFunc(ctx context.Context, in *Rpc, opts ...grpc.CallOption) (*Rpc, error)
	// Remove the custom ID from the social profiles on the current user's account.
	UnlinkCustomFunc(ctx context.Context, in *AccountCustom, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove the device ID from the social profiles on the current user's account.
	UnlinkDeviceFunc(ctx context.Context, in *AccountDevice, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove the email+password from the social profiles on the current user's account.
	UnlinkEmailFunc(ctx context.Context, in *AccountEmail, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove Facebook from the social profiles on the current user's account.
	UnlinkFacebookFunc(ctx context.Context, in *AccountFacebook, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove Apple's GameCenter from the social profiles on the current user's account.
	UnlinkGameCenterFunc(ctx context.Context, in *AccountGameCenter, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove Google from the social profiles on the current user's account.
	UnlinkGoogleFunc(ctx context.Context, in *AccountGoogle, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove Steam from the social profiles on the current user's account.
	UnlinkSteamFunc(ctx context.Context, in *AccountSteam, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Fetch zero or more users by ID and/or username.
	UsersFetchFunc(ctx context.Context, in *UsersFetch, opts ...grpc.CallOption) (*Users, error)
}

type nakamaClient struct {
	cc *grpc.ClientConn
}

func NewNakamaClient(cc *grpc.ClientConn) NakamaClient {
	return &nakamaClient{cc}
}

func (c *nakamaClient) AccountFetch(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AccountFetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AccountUpdateFunc(ctx context.Context, in *AccountUpdate, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AccountUpdateFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateCustomFunc(ctx context.Context, in *AuthenticateCustom, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateCustomFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateDeviceFunc(ctx context.Context, in *AuthenticateDevice, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateDeviceFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateEmailFunc(ctx context.Context, in *AuthenticateEmail, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateEmailFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateFacebookFunc(ctx context.Context, in *AuthenticateFacebook, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateFacebookFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateGameCenterFunc(ctx context.Context, in *AuthenticateGameCenter, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateGameCenterFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateGoogleFunc(ctx context.Context, in *AuthenticateGoogle, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateGoogleFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateSteamFunc(ctx context.Context, in *AuthenticateSteam, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateSteamFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) FriendAddFunc(ctx context.Context, in *FriendAdd, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/FriendAddFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) GroupsCreateFunc(ctx context.Context, in *GroupsCreate, opts ...grpc.CallOption) (*Groups, error) {
	out := new(Groups)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/GroupsCreateFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) Healthcheck(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/Healthcheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkCustomFunc(ctx context.Context, in *AccountCustom, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkCustomFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkDeviceFunc(ctx context.Context, in *AccountDevice, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkDeviceFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkEmailFunc(ctx context.Context, in *AccountEmail, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkEmailFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkFacebookFunc(ctx context.Context, in *AccountFacebook, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkFacebookFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkGameCenterFunc(ctx context.Context, in *AccountGameCenter, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkGameCenterFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkGoogleFunc(ctx context.Context, in *AccountGoogle, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkGoogleFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkSteamFunc(ctx context.Context, in *AccountSteam, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkSteamFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) RpcFunc(ctx context.Context, in *Rpc, opts ...grpc.CallOption) (*Rpc, error) {
	out := new(Rpc)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/RpcFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkCustomFunc(ctx context.Context, in *AccountCustom, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkCustomFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkDeviceFunc(ctx context.Context, in *AccountDevice, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkDeviceFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkEmailFunc(ctx context.Context, in *AccountEmail, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkEmailFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkFacebookFunc(ctx context.Context, in *AccountFacebook, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkFacebookFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkGameCenterFunc(ctx context.Context, in *AccountGameCenter, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkGameCenterFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkGoogleFunc(ctx context.Context, in *AccountGoogle, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkGoogleFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkSteamFunc(ctx context.Context, in *AccountSteam, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkSteamFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UsersFetchFunc(ctx context.Context, in *UsersFetch, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UsersFetchFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nakama service

type NakamaServer interface {
	// Fetch the current user's account.
	AccountFetch(context.Context, *google_protobuf1.Empty) (*Account, error)
	// Update fields in the current user's account.
	AccountUpdateFunc(context.Context, *AccountUpdate) (*google_protobuf1.Empty, error)
	// Authenticate a user with a custom id against the server.
	AuthenticateCustomFunc(context.Context, *AuthenticateCustom) (*Session, error)
	// Authenticate a user with a device id against the server.
	AuthenticateDeviceFunc(context.Context, *AuthenticateDevice) (*Session, error)
	// Authenticate a user with an email+password against the server.
	AuthenticateEmailFunc(context.Context, *AuthenticateEmail) (*Session, error)
	// Authenticate a user with a Facebook OAuth token against the server.
	AuthenticateFacebookFunc(context.Context, *AuthenticateFacebook) (*Session, error)
	// Authenticate a user with Apple's GameCenter against the server.
	AuthenticateGameCenterFunc(context.Context, *AuthenticateGameCenter) (*Session, error)
	// Authenticate a user with Google against the server.
	AuthenticateGoogleFunc(context.Context, *AuthenticateGoogle) (*Session, error)
	// Authenticate a user with Steam against the server.
	AuthenticateSteamFunc(context.Context, *AuthenticateSteam) (*Session, error)
	// Add friends by ID or handle to a user's account.
	FriendAddFunc(context.Context, *FriendAdd) (*google_protobuf1.Empty, error)
	// Create one or more new groups with the current user as the owner.
	GroupsCreateFunc(context.Context, *GroupsCreate) (*Groups, error)
	// A healthcheck which load balancers can use to check the service.
	Healthcheck(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	// Add a custom ID to the social profiles on the current user's account.
	LinkCustomFunc(context.Context, *AccountCustom) (*google_protobuf1.Empty, error)
	// Add a device ID to the social profiles on the current user's account.
	LinkDeviceFunc(context.Context, *AccountDevice) (*google_protobuf1.Empty, error)
	// Add an email+password to the social profiles on the current user's account.
	LinkEmailFunc(context.Context, *AccountEmail) (*google_protobuf1.Empty, error)
	// Add Facebook to the social profiles on the current user's account.
	LinkFacebookFunc(context.Context, *AccountFacebook) (*google_protobuf1.Empty, error)
	// Add Apple's GameCenter to the social profiles on the current user's account.
	LinkGameCenterFunc(context.Context, *AccountGameCenter) (*google_protobuf1.Empty, error)
	// Add Google to the social profiles on the current user's account.
	LinkGoogleFunc(context.Context, *AccountGoogle) (*google_protobuf1.Empty, error)
	// Add Steam to the social profiles on the current user's account.
	LinkSteamFunc(context.Context, *AccountSteam) (*google_protobuf1.Empty, error)
	// Execute a Lua function on the server.
	RpcFunc(context.Context, *Rpc) (*Rpc, error)
	// Remove the custom ID from the social profiles on the current user's account.
	UnlinkCustomFunc(context.Context, *AccountCustom) (*google_protobuf1.Empty, error)
	// Remove the device ID from the social profiles on the current user's account.
	UnlinkDeviceFunc(context.Context, *AccountDevice) (*google_protobuf1.Empty, error)
	// Remove the email+password from the social profiles on the current user's account.
	UnlinkEmailFunc(context.Context, *AccountEmail) (*google_protobuf1.Empty, error)
	// Remove Facebook from the social profiles on the current user's account.
	UnlinkFacebookFunc(context.Context, *AccountFacebook) (*google_protobuf1.Empty, error)
	// Remove Apple's GameCenter from the social profiles on the current user's account.
	UnlinkGameCenterFunc(context.Context, *AccountGameCenter) (*google_protobuf1.Empty, error)
	// Remove Google from the social profiles on the current user's account.
	UnlinkGoogleFunc(context.Context, *AccountGoogle) (*google_protobuf1.Empty, error)
	// Remove Steam from the social profiles on the current user's account.
	UnlinkSteamFunc(context.Context, *AccountSteam) (*google_protobuf1.Empty, error)
	// Fetch zero or more users by ID and/or username.
	UsersFetchFunc(context.Context, *UsersFetch) (*Users, error)
}

func RegisterNakamaServer(s *grpc.Server, srv NakamaServer) {
	s.RegisterService(&_Nakama_serviceDesc, srv)
}

func _Nakama_AccountFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AccountFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AccountFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AccountFetch(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AccountUpdateFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AccountUpdateFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AccountUpdateFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AccountUpdateFunc(ctx, req.(*AccountUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateCustomFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateCustom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateCustomFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateCustomFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateCustomFunc(ctx, req.(*AuthenticateCustom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateDeviceFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateDeviceFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateDeviceFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateDeviceFunc(ctx, req.(*AuthenticateDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateEmailFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateEmailFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateEmailFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateEmailFunc(ctx, req.(*AuthenticateEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateFacebookFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateFacebook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateFacebookFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateFacebookFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateFacebookFunc(ctx, req.(*AuthenticateFacebook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateGameCenterFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateGameCenter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateGameCenterFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateGameCenterFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateGameCenterFunc(ctx, req.(*AuthenticateGameCenter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateGoogleFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateGoogle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateGoogleFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateGoogleFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateGoogleFunc(ctx, req.(*AuthenticateGoogle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateSteamFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateSteam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateSteamFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateSteamFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateSteamFunc(ctx, req.(*AuthenticateSteam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_FriendAddFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).FriendAddFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/FriendAddFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).FriendAddFunc(ctx, req.(*FriendAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_GroupsCreateFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupsCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).GroupsCreateFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/GroupsCreateFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).GroupsCreateFunc(ctx, req.(*GroupsCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).Healthcheck(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkCustomFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCustom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkCustomFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkCustomFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkCustomFunc(ctx, req.(*AccountCustom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkDeviceFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkDeviceFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkDeviceFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkDeviceFunc(ctx, req.(*AccountDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkEmailFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkEmailFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkEmailFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkEmailFunc(ctx, req.(*AccountEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkFacebookFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFacebook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkFacebookFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkFacebookFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkFacebookFunc(ctx, req.(*AccountFacebook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkGameCenterFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGameCenter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkGameCenterFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkGameCenterFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkGameCenterFunc(ctx, req.(*AccountGameCenter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkGoogleFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGoogle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkGoogleFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkGoogleFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkGoogleFunc(ctx, req.(*AccountGoogle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkSteamFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSteam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkSteamFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkSteamFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkSteamFunc(ctx, req.(*AccountSteam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_RpcFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).RpcFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/RpcFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).RpcFunc(ctx, req.(*Rpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkCustomFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCustom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkCustomFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkCustomFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkCustomFunc(ctx, req.(*AccountCustom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkDeviceFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkDeviceFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkDeviceFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkDeviceFunc(ctx, req.(*AccountDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkEmailFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkEmailFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkEmailFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkEmailFunc(ctx, req.(*AccountEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkFacebookFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFacebook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkFacebookFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkFacebookFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkFacebookFunc(ctx, req.(*AccountFacebook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkGameCenterFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGameCenter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkGameCenterFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkGameCenterFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkGameCenterFunc(ctx, req.(*AccountGameCenter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkGoogleFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGoogle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkGoogleFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkGoogleFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkGoogleFunc(ctx, req.(*AccountGoogle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkSteamFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSteam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkSteamFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkSteamFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkSteamFunc(ctx, req.(*AccountSteam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UsersFetchFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersFetch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UsersFetchFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UsersFetchFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UsersFetchFunc(ctx, req.(*UsersFetch))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nakama_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.api.Nakama",
	HandlerType: (*NakamaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountFetch",
			Handler:    _Nakama_AccountFetch_Handler,
		},
		{
			MethodName: "AccountUpdateFunc",
			Handler:    _Nakama_AccountUpdateFunc_Handler,
		},
		{
			MethodName: "AuthenticateCustomFunc",
			Handler:    _Nakama_AuthenticateCustomFunc_Handler,
		},
		{
			MethodName: "AuthenticateDeviceFunc",
			Handler:    _Nakama_AuthenticateDeviceFunc_Handler,
		},
		{
			MethodName: "AuthenticateEmailFunc",
			Handler:    _Nakama_AuthenticateEmailFunc_Handler,
		},
		{
			MethodName: "AuthenticateFacebookFunc",
			Handler:    _Nakama_AuthenticateFacebookFunc_Handler,
		},
		{
			MethodName: "AuthenticateGameCenterFunc",
			Handler:    _Nakama_AuthenticateGameCenterFunc_Handler,
		},
		{
			MethodName: "AuthenticateGoogleFunc",
			Handler:    _Nakama_AuthenticateGoogleFunc_Handler,
		},
		{
			MethodName: "AuthenticateSteamFunc",
			Handler:    _Nakama_AuthenticateSteamFunc_Handler,
		},
		{
			MethodName: "FriendAddFunc",
			Handler:    _Nakama_FriendAddFunc_Handler,
		},
		{
			MethodName: "GroupsCreateFunc",
			Handler:    _Nakama_GroupsCreateFunc_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _Nakama_Healthcheck_Handler,
		},
		{
			MethodName: "LinkCustomFunc",
			Handler:    _Nakama_LinkCustomFunc_Handler,
		},
		{
			MethodName: "LinkDeviceFunc",
			Handler:    _Nakama_LinkDeviceFunc_Handler,
		},
		{
			MethodName: "LinkEmailFunc",
			Handler:    _Nakama_LinkEmailFunc_Handler,
		},
		{
			MethodName: "LinkFacebookFunc",
			Handler:    _Nakama_LinkFacebookFunc_Handler,
		},
		{
			MethodName: "LinkGameCenterFunc",
			Handler:    _Nakama_LinkGameCenterFunc_Handler,
		},
		{
			MethodName: "LinkGoogleFunc",
			Handler:    _Nakama_LinkGoogleFunc_Handler,
		},
		{
			MethodName: "LinkSteamFunc",
			Handler:    _Nakama_LinkSteamFunc_Handler,
		},
		{
			MethodName: "RpcFunc",
			Handler:    _Nakama_RpcFunc_Handler,
		},
		{
			MethodName: "UnlinkCustomFunc",
			Handler:    _Nakama_UnlinkCustomFunc_Handler,
		},
		{
			MethodName: "UnlinkDeviceFunc",
			Handler:    _Nakama_UnlinkDeviceFunc_Handler,
		},
		{
			MethodName: "UnlinkEmailFunc",
			Handler:    _Nakama_UnlinkEmailFunc_Handler,
		},
		{
			MethodName: "UnlinkFacebookFunc",
			Handler:    _Nakama_UnlinkFacebookFunc_Handler,
		},
		{
			MethodName: "UnlinkGameCenterFunc",
			Handler:    _Nakama_UnlinkGameCenterFunc_Handler,
		},
		{
			MethodName: "UnlinkGoogleFunc",
			Handler:    _Nakama_UnlinkGoogleFunc_Handler,
		},
		{
			MethodName: "UnlinkSteamFunc",
			Handler:    _Nakama_UnlinkSteamFunc_Handler,
		},
		{
			MethodName: "UsersFetchFunc",
			Handler:    _Nakama_UsersFetchFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcb, 0x73, 0x1b, 0x49,
	0x19, 0xdf, 0xd1, 0xc3, 0x92, 0x3e, 0xf9, 0xa1, 0x74, 0x1c, 0xaf, 0x22, 0xe7, 0xa1, 0xf4, 0x86,
	0xac, 0xd7, 0xb5, 0x91, 0x52, 0x0a, 0xb0, 0xe0, 0xdd, 0xc3, 0x3a, 0x8e, 0x1c, 0x54, 0xd9, 0x38,
	0xa9, 0xb1, 0x9d, 0x43, 0x0e, 0x88, 0xf6, 0x4c, 0x5b, 0x1a, 0x3c, 0x9a, 0x19, 0xe6, 0x61, 0x97,
	0x79, 0x14, 0x55, 0x54, 0xc1, 0x05, 0x4e, 0x70, 0xd8, 0xe2, 0xc0, 0x01, 0x2e, 0x14, 0x5c, 0xf9,
	0x13, 0x38, 0x73, 0xe2, 0xc6, 0x99, 0xe2, 0xc6, 0x91, 0x3b, 0xd5, 0x5f, 0xcf, 0x4b, 0x8f, 0x51,
	0x8c, 0x4d, 0xf6, 0x14, 0xf5, 0xf7, 0x7d, 0xfd, 0xfd, 0x7e, 0xd3, 0xdf, 0xa3, 0xbf, 0x8e, 0x61,
	0x89, 0x39, 0x46, 0x9b, 0x39, 0x46, 0xcb, 0x71, 0x6d, 0xdf, 0x26, 0x60, 0xb1, 0x13, 0x36, 0x62,
	0x2d, 0xe6, 0x18, 0x8d, 0x5b, 0x03, 0xdb, 0x1e, 0x98, 0xbc, 0x8d, 0x16, 0x96, 0x65, 0xfb, 0xcc,
	0x37, 0x6c, 0xcb, 0x93, 0x96, 0x8d, 0xf5, 0x50, 0x8b, 0xab, 0xa3, 0xe0, 0xb8, 0xcd, 0x47, 0x8e,
	0x7f, 0x1e, 0x2a, 0xef, 0x4c, 0x2a, 0xcf, 0x5c, 0xe6, 0x38, 0xdc, 0x8d, 0x36, 0x7f, 0x8c, 0xff,
	0x68, 0x0f, 0x07, 0xdc, 0x7a, 0xe8, 0x9d, 0xb1, 0xc1, 0x80, 0xbb, 0x6d, 0xdb, 0x41, 0xf7, 0xd3,
	0x50, 0xf4, 0x2f, 0x0a, 0x94, 0xb6, 0x35, 0xcd, 0x0e, 0x2c, 0x9f, 0xdc, 0x87, 0x42, 0xe0, 0x71,
	0xb7, 0xae, 0x34, 0x95, 0x8d, 0x6a, 0xa7, 0xd6, 0x4a, 0xf8, 0xb6, 0x0e, 0x3d, 0xee, 0xaa, 0xa8,
	0x25, 0x0d, 0x28, 0x9f, 0x72, 0xd7, 0x38, 0x36, 0xb8, 0x5e, 0xcf, 0x35, 0x95, 0x8d, 0xb2, 0x1a,
	0xaf, 0xc9, 0x2a, 0x14, 0xf9, 0x88, 0x19, 0x66, 0x3d, 0xdf, 0x54, 0x36, 0x2a, 0xaa, 0x5c, 0x90,
	0xc7, 0x50, 0xd2, 0xf9, 0xa9, 0xa1, 0x71, 0xaf, 0x5e, 0x68, 0xe6, 0x37, 0xaa, 0x9d, 0x9b, 0x69,
	0xd7, 0x21, 0xfa, 0x53, 0xb4, 0x50, 0x23, 0x4b, 0xb2, 0x0e, 0x15, 0x2d, 0xf0, 0x7c, 0x7b, 0xd4,
	0x37, 0xf4, 0x7a, 0x11, 0xdd, 0x95, 0xa5, 0xa0, 0xa7, 0xd3, 0xbb, 0xb0, 0x14, 0x6e, 0xdb, 0x41,
	0x11, 0x59, 0x86, 0x9c, 0xa1, 0x23, 0xf1, 0x8a, 0x9a, 0x33, 0xd2, 0x06, 0xd2, 0xef, 0x94, 0xc1,
	0xe7, 0xb0, 0x18, 0x1a, 0x74, 0x91, 0x63, 0xcc, 0x5c, 0x49, 0x33, 0x6f, 0x40, 0xd9, 0x61, 0x9e,
	0x77, 0x66, 0xbb, 0xf2, 0x5b, 0x2b, 0x6a, 0xbc, 0xa6, 0x1f, 0xc2, 0x4a, 0xe8, 0x61, 0x97, 0x69,
	0xfc, 0xc8, 0xb6, 0x4f, 0x84, 0x13, 0xdf, 0x3e, 0xe1, 0x56, 0xe4, 0x04, 0x17, 0xf4, 0xaf, 0x0a,
	0x5c, 0x0b, 0x2d, 0x9f, 0xb1, 0x11, 0xdf, 0xe1, 0x96, 0xcf, 0x5d, 0xf1, 0x7d, 0x8e, 0xc9, 0xce,
	0xb9, 0xdb, 0x8f, 0x79, 0x95, 0xa5, 0xa0, 0xa7, 0x0b, 0xe5, 0x51, 0x60, 0xe9, 0x26, 0x17, 0xca,
	0x10, 0x58, 0x0a, 0x7a, 0x3a, 0xb9, 0x05, 0x15, 0xdf, 0x18, 0x71, 0xcf, 0x67, 0x23, 0x07, 0x0f,
	0x3a, 0xaf, 0x26, 0x02, 0x42, 0xa0, 0xe0, 0x31, 0xd3, 0xaf, 0x17, 0x70, 0x17, 0xfe, 0x16, 0x3b,
	0x3c, 0x63, 0x60, 0x31, 0x3f, 0x70, 0x79, 0x78, 0x96, 0x89, 0x80, 0xdc, 0x87, 0x65, 0x27, 0x38,
	0x32, 0x0d, 0xad, 0x7f, 0xc2, 0xcf, 0xfb, 0x81, 0x6b, 0xd6, 0x17, 0xd0, 0x64, 0x51, 0x4a, 0x9f,
	0xf3, 0xf3, 0x43, 0xd7, 0xa4, 0x5f, 0x8b, 0x4f, 0xf4, 0x19, 0xe6, 0x5f, 0xc6, 0xc7, 0xde, 0x8f,
	0xcf, 0x75, 0xdf, 0xe7, 0x6c, 0x94, 0x61, 0xf5, 0xaf, 0x5c, 0xec, 0xed, 0xd0, 0xd1, 0x99, 0xcf,
	0xc9, 0xb7, 0xa0, 0x2c, 0xb2, 0xcb, 0x62, 0x23, 0x1e, 0xe6, 0xdf, 0xad, 0x96, 0x4c, 0xf4, 0x56,
	0x94, 0xe8, 0xad, 0x7d, 0xdf, 0x35, 0xac, 0xc1, 0x6b, 0x66, 0x06, 0x5c, 0x8d, 0xad, 0xc5, 0xce,
	0xe3, 0xc0, 0x34, 0x71, 0x67, 0xee, 0x22, 0x3b, 0x23, 0x6b, 0xf2, 0x29, 0x00, 0x3b, 0x65, 0x3e,
	0x73, 0xf1, 0xa3, 0xf3, 0x17, 0xd8, 0x5b, 0x91, 0xf6, 0x87, 0xae, 0x49, 0x1e, 0x41, 0xc1, 0x64,
	0xd6, 0x00, 0xcf, 0xf9, 0x6d, 0xdb, 0xd0, 0x52, 0x10, 0x35, 0x6d, 0x0d, 0xab, 0x0f, 0x83, 0xf0,
	0x56, 0xa2, 0x91, 0xb5, 0xd8, 0x29, 0x02, 0xfc, 0x43, 0xdb, 0xe2, 0x18, 0x9b, 0xb7, 0xee, 0x8c,
	0xac, 0xe9, 0x6f, 0x15, 0x20, 0xdb, 0x81, 0x3f, 0xe4, 0x96, 0x6f, 0x68, 0xcc, 0xe7, 0x61, 0xb9,
	0x3c, 0x86, 0x12, 0x93, 0xc7, 0x1f, 0x1e, 0xf6, 0xac, 0x8a, 0x94, 0xb6, 0x6a, 0x64, 0x49, 0x3a,
	0xb0, 0xa0, 0xb9, 0x9c, 0xf9, 0xd1, 0x31, 0x37, 0xa6, 0x38, 0x3c, 0xb1, 0x6d, 0x53, 0x32, 0x08,
	0x2d, 0x45, 0x01, 0xc5, 0x61, 0x95, 0x3d, 0x21, 0x5e, 0x4f, 0x71, 0x0b, 0x2b, 0xf5, 0x42, 0xdc,
	0xa2, 0x6e, 0xf1, 0xae, 0xb8, 0x7d, 0x29, 0x6a, 0x36, 0xc5, 0x4d, 0x36, 0x89, 0xce, 0x24, 0xb5,
	0xfa, 0x0c, 0x6a, 0x68, 0xfa, 0xee, 0x98, 0xfd, 0x4e, 0x81, 0xd5, 0x34, 0xb3, 0xb8, 0xf9, 0x7c,
	0x63, 0x92, 0xdc, 0xfa, 0x0c, 0x72, 0x91, 0xf5, 0xbb, 0xe3, 0xf7, 0x7b, 0x05, 0xd6, 0xd2, 0xfc,
	0x52, 0x2d, 0xef, 0x93, 0x49, 0x86, 0xb7, 0x67, 0x30, 0x4c, 0xec, 0xbf, 0xba, 0xcc, 0x0b, 0x3b,
	0xda, 0x85, 0x32, 0x4f, 0xda, 0x7e, 0x75, 0x99, 0x27, 0xdb, 0xe8, 0x85, 0x32, 0x0f, 0x4d, 0xdf,
	0x1d, 0xb3, 0xef, 0x41, 0x65, 0x67, 0xc8, 0x2c, 0x8b, 0x9b, 0x3d, 0x7d, 0xf2, 0x3e, 0x15, 0xd7,
	0x8e, 0x7f, 0xee, 0x48, 0xa8, 0xa2, 0x8a, 0xbf, 0x69, 0x1b, 0x0a, 0x07, 0xe7, 0x0e, 0x27, 0x65,
	0x28, 0xa8, 0x2f, 0x5f, 0xbe, 0xa8, 0xbd, 0x47, 0x08, 0x2c, 0x3f, 0xed, 0xa9, 0xdd, 0x9d, 0x83,
	0xfe, 0x8b, 0xee, 0xfe, 0xfe, 0xf6, 0xb3, 0x6e, 0x4d, 0x21, 0x15, 0x28, 0x3e, 0x53, 0x5f, 0x1e,
	0xbe, 0xaa, 0xe5, 0xe8, 0xaf, 0x14, 0x58, 0xd8, 0x75, 0x0d, 0x6e, 0xe9, 0x17, 0x9c, 0x45, 0x56,
	0xa1, 0xe8, 0xf9, 0xd1, 0x17, 0x16, 0x55, 0xb9, 0xa0, 0xbb, 0x50, 0xdc, 0x17, 0x3f, 0x08, 0xc0,
	0xc2, 0xae, 0xda, 0xeb, 0xee, 0x3d, 0xad, 0xbd, 0x47, 0x56, 0xa0, 0xda, 0xdb, 0x7b, 0xdd, 0x3b,
	0xe8, 0xf6, 0xf7, 0xbb, 0x7b, 0x07, 0x35, 0x85, 0x5c, 0x87, 0x95, 0x50, 0xa0, 0x76, 0x77, 0xba,
	0xbd, 0xd7, 0xdd, 0xa7, 0xb5, 0x1c, 0xa9, 0x42, 0xe9, 0xc9, 0x17, 0x2f, 0x77, 0x9e, 0x77, 0x9f,
	0xd6, 0xf2, 0xf4, 0x53, 0xa8, 0x48, 0x36, 0xdb, 0xba, 0x4e, 0x6a, 0x90, 0x37, 0x74, 0xaf, 0xae,
	0x34, 0xf3, 0x1b, 0x15, 0x55, 0xfc, 0x14, 0xb7, 0x6a, 0x74, 0x36, 0x5e, 0x3d, 0x87, 0xf2, 0x44,
	0x40, 0xff, 0x96, 0x83, 0xe2, 0x33, 0xd7, 0x0e, 0x9c, 0xa9, 0xa3, 0xba, 0x0d, 0x80, 0xa7, 0x6d,
	0xbb, 0xc9, 0xed, 0x5e, 0x09, 0x25, 0x3d, 0x3c, 0xc9, 0xd4, 0xf1, 0xe3, 0x6f, 0xd2, 0x84, 0xaa,
	0xce, 0x3d, 0xcd, 0x35, 0x70, 0x8e, 0x0b, 0xef, 0xf6, 0xb4, 0x48, 0xec, 0xc2, 0xeb, 0x48, 0xde,
	0xee, 0xf2, 0xc2, 0x69, 0x40, 0x79, 0xc4, 0x7d, 0xa6, 0x33, 0x9f, 0x85, 0x57, 0x7a, 0xbc, 0x16,
	0x24, 0x52, 0x77, 0x5f, 0x49, 0x92, 0x48, 0x6e, 0xb7, 0x3a, 0x94, 0x1c, 0xd7, 0x38, 0x15, 0x47,
	0x5b, 0xc6, 0x19, 0x2f, 0x5a, 0x8a, 0x23, 0x97, 0x79, 0x58, 0xc1, 0xc9, 0x43, 0x2e, 0x08, 0x85,
	0xa5, 0xc0, 0xd7, 0xfa, 0xf6, 0xf1, 0xb1, 0xc7, 0xfd, 0xfe, 0xc8, 0xab, 0x03, 0x6a, 0xab, 0x81,
	0xaf, 0xbd, 0x44, 0xd9, 0x0b, 0x2f, 0xfe, 0x6e, 0xae, 0xf7, 0x99, 0x5f, 0xaf, 0xca, 0xc1, 0x25,
	0x94, 0x6c, 0xfb, 0x42, 0x1d, 0xe0, 0x2c, 0x80, 0xea, 0x45, 0xa9, 0x0e, 0x25, 0xdb, 0x3e, 0x7d,
	0x0c, 0x0b, 0x78, 0x9c, 0x1e, 0xf9, 0x08, 0x16, 0x06, 0xf8, 0x0b, 0x83, 0x51, 0xed, 0x5c, 0x4b,
	0x27, 0x07, 0xda, 0xa8, 0xa1, 0x01, 0xfd, 0x8f, 0x02, 0x8b, 0x72, 0xd7, 0x8e, 0xcc, 0xef, 0x6f,
	0x4f, 0xec, 0xbd, 0x37, 0xb5, 0x37, 0xb4, 0x6c, 0xed, 0xf1, 0xb3, 0x31, 0x5f, 0x8d, 0x3f, 0x29,
	0x50, 0x8e, 0x84, 0x71, 0x90, 0x94, 0xec, 0x20, 0xe5, 0xb2, 0x83, 0x94, 0xcf, 0x08, 0x52, 0x61,
	0x6e, 0x90, 0x8a, 0x73, 0x82, 0xb4, 0x30, 0x16, 0x24, 0xfa, 0x0b, 0x05, 0xf2, 0xaa, 0xa3, 0x4d,
	0xa5, 0xde, 0x37, 0xa1, 0xe4, 0xb0, 0x73, 0xd3, 0x66, 0xfa, 0x85, 0x46, 0xa5, 0xc8, 0x98, 0x7c,
	0x02, 0xe5, 0xa1, 0xef, 0x3b, 0x62, 0x40, 0xbc, 0xd0, 0x9c, 0x54, 0x12, 0xd6, 0xcf, 0xf9, 0x39,
	0xfd, 0x0c, 0x4a, 0xfb, 0xdc, 0xf3, 0xc4, 0xc7, 0xcf, 0x9c, 0x04, 0xc5, 0xa4, 0x1b, 0xe8, 0x4e,
	0x5f, 0x6a, 0xc2, 0x49, 0x37, 0xd0, 0x9d, 0x03, 0x1c, 0x13, 0xff, 0x98, 0x87, 0x82, 0xa8, 0xf6,
	0xa9, 0xef, 0x48, 0xb7, 0xa9, 0xdc, 0x78, 0x9b, 0x12, 0xba, 0x78, 0x1e, 0x0c, 0x5b, 0x58, 0x3c,
	0xf1, 0x8d, 0x1f, 0x68, 0x61, 0xf2, 0x40, 0x33, 0x8a, 0x28, 0x9e, 0xda, 0xc2, 0x22, 0x8a, 0xe7,
	0xb2, 0x46, 0x6a, 0x2e, 0x93, 0x25, 0x14, 0xaf, 0xc7, 0xe2, 0x5a, 0x9e, 0x88, 0xeb, 0x5d, 0xa8,
	0x1e, 0x87, 0x17, 0xb1, 0x68, 0x01, 0x15, 0x54, 0x43, 0x24, 0x92, 0xf3, 0xbf, 0x3c, 0x5e, 0xa1,
	0x06, 0xb9, 0x5b, 0x0a, 0x7a, 0x3a, 0xb9, 0x07, 0x8b, 0x03, 0x36, 0xd2, 0xf0, 0x8e, 0x14, 0xfa,
	0xaa, 0x4c, 0xb4, 0x58, 0xd6, 0xd3, 0xc9, 0x4d, 0x28, 0x7b, 0xe2, 0x32, 0x10, 0xea, 0x45, 0x54,
	0x97, 0x70, 0xdd, 0xd3, 0xc9, 0x1a, 0x2c, 0xd8, 0x96, 0x69, 0x58, 0xbc, 0xbe, 0x84, 0x39, 0x13,
	0xae, 0x26, 0xaa, 0x73, 0x79, 0x7e, 0x75, 0xae, 0x4c, 0x56, 0x67, 0x1b, 0x8a, 0x22, 0x50, 0x1e,
	0x79, 0x00, 0x45, 0x11, 0x89, 0xa8, 0xbe, 0xa6, 0x1b, 0xb7, 0x54, 0xd3, 0xcf, 0x00, 0x70, 0xc3,
	0x2e, 0xf7, 0xb5, 0xe1, 0xff, 0xda, 0x5c, 0x3b, 0xff, 0x7e, 0x1f, 0x16, 0xf6, 0xd0, 0x31, 0x79,
	0x15, 0x3f, 0x38, 0xa4, 0xab, 0xb5, 0xa9, 0xc4, 0xec, 0x8a, 0xc7, 0x73, 0xe3, 0xfa, 0x8c, 0x0b,
	0x93, 0x5e, 0xff, 0xd9, 0xdf, 0xff, 0xf9, 0x9b, 0xdc, 0x12, 0xa9, 0xb6, 0x4f, 0x3b, 0xed, 0xe8,
	0xde, 0xfc, 0x6e, 0xfc, 0x5c, 0x93, 0x6f, 0x93, 0xdd, 0xc0, 0xd2, 0xc8, 0xac, 0x51, 0x40, 0xaa,
	0x1b, 0x19, 0x88, 0x74, 0x0d, 0x9d, 0xd7, 0x1a, 0x69, 0xe7, 0x5b, 0xca, 0x26, 0xf9, 0xe9, 0xf8,
	0x80, 0x24, 0xc7, 0x6c, 0x04, 0xb9, 0x33, 0x06, 0x32, 0x65, 0x33, 0xfe, 0x0d, 0x61, 0x5d, 0xd1,
	0x47, 0x08, 0xb3, 0x49, 0xef, 0xa6, 0x60, 0xda, 0x2c, 0xb5, 0xb9, 0x2d, 0x9f, 0xcd, 0x5b, 0xf1,
	0x60, 0x30, 0x41, 0x40, 0xce, 0xd2, 0xf3, 0x09, 0x48, 0x9b, 0xcb, 0x12, 0x90, 0x6f, 0xfa, 0x84,
	0xc0, 0x8f, 0xe1, 0xc6, 0xd4, 0x70, 0x8d, 0xf8, 0xb7, 0xb3, 0xf0, 0xd1, 0x64, 0x36, 0x7c, 0x1b,
	0xe1, 0x3f, 0xa2, 0x77, 0x32, 0xe1, 0xf1, 0x2d, 0x9f, 0xa0, 0xff, 0x5c, 0x81, 0xfa, 0xac, 0x09,
	0x1a, 0x19, 0x34, 0xb3, 0x18, 0x44, 0x56, 0xb3, 0x49, 0x74, 0x90, 0xc4, 0xc7, 0xf4, 0x5e, 0x26,
	0x89, 0xa8, 0xba, 0x13, 0x1e, 0xbf, 0x54, 0xa0, 0x31, 0x7b, 0x52, 0x46, 0x26, 0x34, 0x8b, 0x49,
	0x62, 0x37, 0x9b, 0xcb, 0xd7, 0x91, 0x4b, 0x8b, 0x7e, 0x90, 0xc9, 0x65, 0xc0, 0x46, 0x5c, 0xf6,
	0x8a, 0xcc, 0xa4, 0x90, 0x63, 0xee, 0xfc, 0xa4, 0x90, 0x36, 0x97, 0x4d, 0x0a, 0x59, 0x34, 0x99,
	0x49, 0x81, 0xc3, 0xec, 0xfc, 0xa4, 0x40, 0x93, 0xcb, 0x26, 0x05, 0xf6, 0xc3, 0x04, 0x5d, 0x85,
	0xa5, 0x78, 0xd6, 0x43, 0xd4, 0x1b, 0x69, 0xb7, 0xb1, 0x2a, 0xb3, 0xd8, 0x09, 0x02, 0x2e, 0x52,
	0x10, 0x80, 0xc7, 0x72, 0x86, 0x7d, 0x0d, 0xb5, 0xf4, 0x48, 0x81, 0x6e, 0xeb, 0x59, 0x03, 0x47,
	0x83, 0x4c, 0x6b, 0xe8, 0x2a, 0x7a, 0x5d, 0xa6, 0x15, 0xe1, 0x15, 0xe7, 0x10, 0xd1, 0x40, 0xf6,
	0xa1, 0xfa, 0x1d, 0xce, 0x4c, 0x7f, 0xa8, 0x0d, 0xb9, 0x76, 0x92, 0xd9, 0xf1, 0xb2, 0xa8, 0x86,
	0x4e, 0xc9, 0x62, 0x7b, 0x98, 0xf2, 0x32, 0x80, 0xe5, 0x2f, 0x0c, 0xeb, 0x24, 0xd5, 0x8d, 0xb2,
	0xff, 0x4f, 0x20, 0xd3, 0x35, 0x45, 0xd7, 0xb7, 0xe8, 0xfb, 0xe9, 0x63, 0x37, 0x0d, 0xeb, 0x24,
	0xea, 0x41, 0xca, 0x66, 0x04, 0x94, 0xea, 0x3a, 0xd9, 0x0f, 0xfc, 0x4b, 0x00, 0x85, 0xbd, 0x46,
	0xd9, 0x24, 0x3a, 0x2c, 0x09, 0xa0, 0xa4, 0xbb, 0x64, 0xbe, 0xd6, 0x33, 0x61, 0xee, 0x21, 0xcc,
	0x3a, 0x5d, 0x9b, 0x82, 0x91, 0x3d, 0x45, 0xd9, 0x24, 0x23, 0xa8, 0x09, 0x94, 0xb1, 0x26, 0x32,
	0xef, 0xe5, 0x9d, 0x89, 0x75, 0x1f, 0xb1, 0xee, 0xd0, 0x9b, 0x53, 0x58, 0x71, 0xeb, 0x50, 0x36,
	0x89, 0x07, 0x44, 0xc0, 0x4d, 0xf4, 0x8a, 0xf9, 0x0f, 0xe9, 0x4c, 0xc8, 0x07, 0x08, 0xd9, 0xa4,
	0xeb, 0x53, 0x90, 0xa9, 0x0e, 0x91, 0x84, 0x2c, 0xd5, 0x13, 0xb2, 0x5f, 0xc6, 0x97, 0x08, 0x59,
	0xd8, 0x09, 0x92, 0x90, 0x25, 0xb5, 0x9f, 0xf9, 0xcc, 0xbd, 0x44, 0xc8, 0x64, 0xc5, 0x2b, 0x9b,
	0xe4, 0x0d, 0x94, 0x54, 0x47, 0x43, 0xff, 0x2b, 0x69, 0xff, 0xaa, 0xa3, 0x35, 0x26, 0x05, 0xf4,
	0x21, 0xfa, 0xfb, 0x90, 0x2e, 0x0a, 0x7f, 0xae, 0xa3, 0xb5, 0x7f, 0x64, 0xe8, 0x3f, 0xd9, 0x8a,
	0x26, 0xe3, 0x37, 0xa2, 0x8c, 0x52, 0x0a, 0x72, 0x02, 0xb5, 0x43, 0x31, 0x50, 0x5d, 0xb1, 0x90,
	0x66, 0x26, 0x43, 0x60, 0x4d, 0x94, 0x52, 0x0c, 0x76, 0xb5, 0x62, 0x9a, 0x07, 0x96, 0x94, 0xd3,
	0x10, 0x56, 0x24, 0xd8, 0x55, 0x0a, 0xea, 0x03, 0x84, 0xba, 0x4d, 0xeb, 0x33, 0xa0, 0xe2, 0x92,
	0xfa, 0x01, 0x10, 0x89, 0x74, 0xf5, 0xa2, 0x9a, 0x99, 0xe1, 0x21, 0x5e, 0xba, 0xac, 0xce, 0x60,
	0x55, 0x42, 0xfe, 0x7f, 0x0a, 0x6b, 0x03, 0x61, 0x29, 0xbd, 0x3d, 0x03, 0x76, 0xbc, 0xb4, 0xe2,
	0x10, 0x5e, 0xad, 0xb8, 0xe6, 0x85, 0x30, 0x29, 0xaf, 0x38, 0x84, 0x57, 0x29, 0xb0, 0x79, 0x21,
	0x8c, 0x4b, 0xec, 0x05, 0x2c, 0x27, 0xe3, 0x3d, 0x02, 0xad, 0x4d, 0xbe, 0x04, 0xa4, 0xae, 0x71,
	0x6d, 0x4a, 0x4e, 0x6b, 0x88, 0x00, 0xa4, 0x2c, 0x10, 0xc4, 0xd0, 0xff, 0xe4, 0xcb, 0xdc, 0xaf,
	0xb7, 0xff, 0xa1, 0x90, 0x00, 0x96, 0xe4, 0xd4, 0xdf, 0xdc, 0x7e, 0xd5, 0x6b, 0x9e, 0x76, 0x68,
	0x1f, 0xee, 0x1d, 0x0c, 0x79, 0x33, 0x12, 0x06, 0xfe, 0xd0, 0x76, 0xbd, 0xe6, 0x83, 0xe6, 0x8e,
	0x6d, 0xf9, 0xae, 0x71, 0x14, 0xf8, 0xb6, 0xeb, 0x91, 0xfb, 0xe2, 0x31, 0xea, 0x6d, 0xb5, 0xdb,
	0x03, 0xc3, 0x1f, 0x06, 0x47, 0x2d, 0xcd, 0x1e, 0xb5, 0x87, 0xdc, 0xb5, 0x0d, 0xcd, 0x64, 0x47,
	0x5e, 0x5b, 0xc2, 0x37, 0x56, 0x87, 0xdc, 0x34, 0xed, 0xcf, 0x13, 0x85, 0xb0, 0xeb, 0xe4, 0x3b,
	0xad, 0x47, 0x9b, 0x8a, 0xd2, 0xa9, 0x31, 0xc7, 0x31, 0x0d, 0xf9, 0xec, 0x6b, 0x7f, 0xdf, 0xb3,
	0xad, 0xad, 0x29, 0x89, 0xbb, 0x05, 0xeb, 0x21, 0x11, 0x8f, 0xbb, 0xa7, 0xdc, 0x6d, 0xea, 0xb6,
	0x16, 0x8c, 0xb8, 0x25, 0xff, 0xe0, 0x46, 0xd6, 0x23, 0x1a, 0xe3, 0x10, 0x6d, 0xdd, 0xd6, 0x3c,
	0xb8, 0xa1, 0xd9, 0xa3, 0x56, 0x4a, 0x21, 0x49, 0x3d, 0xa9, 0x48, 0x87, 0xdb, 0x8e, 0xf1, 0x4a,
	0x79, 0x93, 0x67, 0x8e, 0xf1, 0x87, 0x5c, 0x61, 0xef, 0xf9, 0xab, 0x27, 0x7f, 0xce, 0x85, 0xcf,
	0x9f, 0xa3, 0x05, 0x8c, 0xce, 0xe3, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x88, 0x3f, 0xea, 0x87,
	0x6c, 0x1c, 0x00, 0x00,
}
